//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("SkladTov3En", "FkадминистраторID", "администратор", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.администратор), "аунтификация_администратора", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.аунтификация_администратора), true)]
[assembly: EdmRelationshipAttribute("SkladTov3En", "Fkадрес1ID", "адрес", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.адрес), "поставщики", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.поставщики), true)]
[assembly: EdmRelationshipAttribute("SkladTov3En", "FkадресID", "адрес", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.адрес), "склад", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.склад), true)]
[assembly: EdmRelationshipAttribute("SkladTov3En", "Fkсотрудник3ID", "сотрудник", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.сотрудник), "аунтификация_сотрудника", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.аунтификация_сотрудника), true)]
[assembly: EdmRelationshipAttribute("SkladTov3En", "FkскладID", "склад", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.склад), "инвентаризация_склада", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.инвентаризация_склада), true)]
[assembly: EdmRelationshipAttribute("SkladTov3En", "FkсотрудникID", "сотрудник", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.сотрудник), "инвентаризация_склада", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.инвентаризация_склада), true)]
[assembly: EdmRelationshipAttribute("SkladTov3En", "FkтоварыID", "товары", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.товары), "инвентаризация_склада", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.инвентаризация_склада), true)]
[assembly: EdmRelationshipAttribute("SkladTov3En", "Fkкатегория_товараID", "категория_товара", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.категория_товара), "товары", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.товары), true)]
[assembly: EdmRelationshipAttribute("SkladTov3En", "FkполID", "пол", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.пол), "товары", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.товары), true)]
[assembly: EdmRelationshipAttribute("SkladTov3En", "FkпоставщикиID", "поставщики", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.поставщики), "товары", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.товары), true)]
[assembly: EdmRelationshipAttribute("SkladTov3En", "Fkсотрудник1ID", "сотрудник", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.сотрудник), "приемка_товара", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.приемка_товара), true)]
[assembly: EdmRelationshipAttribute("SkladTov3En", "Fkстатус_качества_товараID", "статус_качества_товара", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.статус_качества_товара), "приемка_товара", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.приемка_товара), true)]
[assembly: EdmRelationshipAttribute("SkladTov3En", "Fkтовары2ID", "товары", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.товары), "приемка_товара", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.приемка_товара), true)]
[assembly: EdmRelationshipAttribute("SkladTov3En", "FkразмерыID", "размеры", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.размеры), "товары", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.товары), true)]
[assembly: EdmRelationshipAttribute("SkladTov3En", "Fkсклад1ID", "склад", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.склад), "товары_на_складе", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.товары_на_складе), true)]
[assembly: EdmRelationshipAttribute("SkladTov3En", "Fkтовары1ID", "товары", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.товары), "товары_на_складе", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.товары_на_складе), true)]
[assembly: EdmRelationshipAttribute("SkladTov3En", "FkцветID", "цвет", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Kursovaya.цвет), "товары", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Kursovaya.товары), true)]

#endregion

namespace Kursovaya
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class SkladTov3Enn : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект SkladTov3Enn, используя строку соединения из раздела "SkladTov3Enn" файла конфигурации приложения.
        /// </summary>
        public SkladTov3Enn() : base("name=SkladTov3Enn", "SkladTov3Enn")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта SkladTov3Enn.
        /// </summary>
        public SkladTov3Enn(string connectionString) : base(connectionString, "SkladTov3Enn")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта SkladTov3Enn.
        /// </summary>
        public SkladTov3Enn(EntityConnection connection) : base(connection, "SkladTov3Enn")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<sysdiagrams> sysdiagrams
        {
            get
            {
                if ((_sysdiagrams == null))
                {
                    _sysdiagrams = base.CreateObjectSet<sysdiagrams>("sysdiagrams");
                }
                return _sysdiagrams;
            }
        }
        private ObjectSet<sysdiagrams> _sysdiagrams;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<администратор> администратор
        {
            get
            {
                if ((_администратор == null))
                {
                    _администратор = base.CreateObjectSet<администратор>("администратор");
                }
                return _администратор;
            }
        }
        private ObjectSet<администратор> _администратор;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<адрес> адрес
        {
            get
            {
                if ((_адрес == null))
                {
                    _адрес = base.CreateObjectSet<адрес>("адрес");
                }
                return _адрес;
            }
        }
        private ObjectSet<адрес> _адрес;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<аунтификация_администратора> аунтификация_администратора
        {
            get
            {
                if ((_аунтификация_администратора == null))
                {
                    _аунтификация_администратора = base.CreateObjectSet<аунтификация_администратора>("аунтификация_администратора");
                }
                return _аунтификация_администратора;
            }
        }
        private ObjectSet<аунтификация_администратора> _аунтификация_администратора;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<аунтификация_сотрудника> аунтификация_сотрудника
        {
            get
            {
                if ((_аунтификация_сотрудника == null))
                {
                    _аунтификация_сотрудника = base.CreateObjectSet<аунтификация_сотрудника>("аунтификация_сотрудника");
                }
                return _аунтификация_сотрудника;
            }
        }
        private ObjectSet<аунтификация_сотрудника> _аунтификация_сотрудника;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<инвентаризация_склада> инвентаризация_склада
        {
            get
            {
                if ((_инвентаризация_склада == null))
                {
                    _инвентаризация_склада = base.CreateObjectSet<инвентаризация_склада>("инвентаризация_склада");
                }
                return _инвентаризация_склада;
            }
        }
        private ObjectSet<инвентаризация_склада> _инвентаризация_склада;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<категория_товара> категория_товара
        {
            get
            {
                if ((_категория_товара == null))
                {
                    _категория_товара = base.CreateObjectSet<категория_товара>("категория_товара");
                }
                return _категория_товара;
            }
        }
        private ObjectSet<категория_товара> _категория_товара;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<пол> пол
        {
            get
            {
                if ((_пол == null))
                {
                    _пол = base.CreateObjectSet<пол>("пол");
                }
                return _пол;
            }
        }
        private ObjectSet<пол> _пол;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<поставщики> поставщики
        {
            get
            {
                if ((_поставщики == null))
                {
                    _поставщики = base.CreateObjectSet<поставщики>("поставщики");
                }
                return _поставщики;
            }
        }
        private ObjectSet<поставщики> _поставщики;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<приемка_товара> приемка_товара
        {
            get
            {
                if ((_приемка_товара == null))
                {
                    _приемка_товара = base.CreateObjectSet<приемка_товара>("приемка_товара");
                }
                return _приемка_товара;
            }
        }
        private ObjectSet<приемка_товара> _приемка_товара;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<размеры> размеры
        {
            get
            {
                if ((_размеры == null))
                {
                    _размеры = base.CreateObjectSet<размеры>("размеры");
                }
                return _размеры;
            }
        }
        private ObjectSet<размеры> _размеры;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<склад> склад
        {
            get
            {
                if ((_склад == null))
                {
                    _склад = base.CreateObjectSet<склад>("склад");
                }
                return _склад;
            }
        }
        private ObjectSet<склад> _склад;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<сотрудник> сотрудник
        {
            get
            {
                if ((_сотрудник == null))
                {
                    _сотрудник = base.CreateObjectSet<сотрудник>("сотрудник");
                }
                return _сотрудник;
            }
        }
        private ObjectSet<сотрудник> _сотрудник;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<статус_качества_товара> статус_качества_товара
        {
            get
            {
                if ((_статус_качества_товара == null))
                {
                    _статус_качества_товара = base.CreateObjectSet<статус_качества_товара>("статус_качества_товара");
                }
                return _статус_качества_товара;
            }
        }
        private ObjectSet<статус_качества_товара> _статус_качества_товара;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<товары> товары
        {
            get
            {
                if ((_товары == null))
                {
                    _товары = base.CreateObjectSet<товары>("товары");
                }
                return _товары;
            }
        }
        private ObjectSet<товары> _товары;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<товары_на_складе> товары_на_складе
        {
            get
            {
                if ((_товары_на_складе == null))
                {
                    _товары_на_складе = base.CreateObjectSet<товары_на_складе>("товары_на_складе");
                }
                return _товары_на_складе;
            }
        }
        private ObjectSet<товары_на_складе> _товары_на_складе;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<цвет> цвет
        {
            get
            {
                if ((_цвет == null))
                {
                    _цвет = base.CreateObjectSet<цвет>("цвет");
                }
                return _цвет;
            }
        }
        private ObjectSet<цвет> _цвет;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet sysdiagrams. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTosysdiagrams(sysdiagrams sysdiagrams)
        {
            base.AddObject("sysdiagrams", sysdiagrams);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet администратор. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToадминистратор(администратор администратор)
        {
            base.AddObject("администратор", администратор);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet адрес. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToадрес(адрес адрес)
        {
            base.AddObject("адрес", адрес);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet аунтификация_администратора. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToаунтификация_администратора(аунтификация_администратора аунтификация_администратора)
        {
            base.AddObject("аунтификация_администратора", аунтификация_администратора);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet аунтификация_сотрудника. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToаунтификация_сотрудника(аунтификация_сотрудника аунтификация_сотрудника)
        {
            base.AddObject("аунтификация_сотрудника", аунтификация_сотрудника);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet инвентаризация_склада. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToинвентаризация_склада(инвентаризация_склада инвентаризация_склада)
        {
            base.AddObject("инвентаризация_склада", инвентаризация_склада);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet категория_товара. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToкатегория_товара(категория_товара категория_товара)
        {
            base.AddObject("категория_товара", категория_товара);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet пол. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToпол(пол пол)
        {
            base.AddObject("пол", пол);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet поставщики. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToпоставщики(поставщики поставщики)
        {
            base.AddObject("поставщики", поставщики);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet приемка_товара. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToприемка_товара(приемка_товара приемка_товара)
        {
            base.AddObject("приемка_товара", приемка_товара);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet размеры. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToразмеры(размеры размеры)
        {
            base.AddObject("размеры", размеры);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet склад. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToсклад(склад склад)
        {
            base.AddObject("склад", склад);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet сотрудник. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToсотрудник(сотрудник сотрудник)
        {
            base.AddObject("сотрудник", сотрудник);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet статус_качества_товара. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToстатус_качества_товара(статус_качества_товара статус_качества_товара)
        {
            base.AddObject("статус_качества_товара", статус_качества_товара);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet товары. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToтовары(товары товары)
        {
            base.AddObject("товары", товары);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet товары_на_складе. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToтовары_на_складе(товары_на_складе товары_на_складе)
        {
            base.AddObject("товары_на_складе", товары_на_складе);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet цвет. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToцвет(цвет цвет)
        {
            base.AddObject("цвет", цвет);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="sysdiagrams")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class sysdiagrams : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта sysdiagrams.
        /// </summary>
        /// <param name="name">Исходное значение свойства name.</param>
        /// <param name="principal_id">Исходное значение свойства principal_id.</param>
        /// <param name="diagram_id">Исходное значение свойства diagram_id.</param>
        public static sysdiagrams Createsysdiagrams(global::System.String name, global::System.Int32 principal_id, global::System.Int32 diagram_id)
        {
            sysdiagrams sysdiagrams = new sysdiagrams();
            sysdiagrams.name = name;
            sysdiagrams.principal_id = principal_id;
            sysdiagrams.diagram_id = diagram_id;
            return sysdiagrams;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false, "name");
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 principal_id
        {
            get
            {
                return _principal_id;
            }
            set
            {
                Onprincipal_idChanging(value);
                ReportPropertyChanging("principal_id");
                _principal_id = StructuralObject.SetValidValue(value, "principal_id");
                ReportPropertyChanged("principal_id");
                Onprincipal_idChanged();
            }
        }
        private global::System.Int32 _principal_id;
        partial void Onprincipal_idChanging(global::System.Int32 value);
        partial void Onprincipal_idChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 diagram_id
        {
            get
            {
                return _diagram_id;
            }
            set
            {
                if (_diagram_id != value)
                {
                    Ondiagram_idChanging(value);
                    ReportPropertyChanging("diagram_id");
                    _diagram_id = StructuralObject.SetValidValue(value, "diagram_id");
                    ReportPropertyChanged("diagram_id");
                    Ondiagram_idChanged();
                }
            }
        }
        private global::System.Int32 _diagram_id;
        partial void Ondiagram_idChanging(global::System.Int32 value);
        partial void Ondiagram_idChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> version
        {
            get
            {
                return _version;
            }
            set
            {
                OnversionChanging(value);
                ReportPropertyChanging("version");
                _version = StructuralObject.SetValidValue(value, "version");
                ReportPropertyChanged("version");
                OnversionChanged();
            }
        }
        private Nullable<global::System.Int32> _version;
        partial void OnversionChanging(Nullable<global::System.Int32> value);
        partial void OnversionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] definition
        {
            get
            {
                return StructuralObject.GetValidValue(_definition);
            }
            set
            {
                OndefinitionChanging(value);
                ReportPropertyChanging("definition");
                _definition = StructuralObject.SetValidValue(value, true, "definition");
                ReportPropertyChanged("definition");
                OndefinitionChanged();
            }
        }
        private global::System.Byte[] _definition;
        partial void OndefinitionChanging(global::System.Byte[] value);
        partial void OndefinitionChanged();

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="администратор")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class администратор : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта администратор.
        /// </summary>
        /// <param name="iD_админ">Исходное значение свойства ID_админ.</param>
        /// <param name="фамилия">Исходное значение свойства фамилия.</param>
        /// <param name="имя">Исходное значение свойства имя.</param>
        /// <param name="дата_рождения">Исходное значение свойства дата_рождения.</param>
        public static администратор Createадминистратор(global::System.Int32 iD_админ, global::System.String фамилия, global::System.String имя, global::System.DateTime дата_рождения)
        {
            администратор администратор = new администратор();
            администратор.ID_админ = iD_админ;
            администратор.фамилия = фамилия;
            администратор.имя = имя;
            администратор.дата_рождения = дата_рождения;
            return администратор;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_админ
        {
            get
            {
                return _ID_админ;
            }
            set
            {
                if (_ID_админ != value)
                {
                    OnID_админChanging(value);
                    ReportPropertyChanging("ID_админ");
                    _ID_админ = StructuralObject.SetValidValue(value, "ID_админ");
                    ReportPropertyChanged("ID_админ");
                    OnID_админChanged();
                }
            }
        }
        private global::System.Int32 _ID_админ;
        partial void OnID_админChanging(global::System.Int32 value);
        partial void OnID_админChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String фамилия
        {
            get
            {
                return _фамилия;
            }
            set
            {
                OnфамилияChanging(value);
                ReportPropertyChanging("фамилия");
                _фамилия = StructuralObject.SetValidValue(value, false, "фамилия");
                ReportPropertyChanged("фамилия");
                OnфамилияChanged();
            }
        }
        private global::System.String _фамилия;
        partial void OnфамилияChanging(global::System.String value);
        partial void OnфамилияChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String имя
        {
            get
            {
                return _имя;
            }
            set
            {
                OnимяChanging(value);
                ReportPropertyChanging("имя");
                _имя = StructuralObject.SetValidValue(value, false, "имя");
                ReportPropertyChanged("имя");
                OnимяChanged();
            }
        }
        private global::System.String _имя;
        partial void OnимяChanging(global::System.String value);
        partial void OnимяChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String отчество
        {
            get
            {
                return _отчество;
            }
            set
            {
                OnотчествоChanging(value);
                ReportPropertyChanging("отчество");
                _отчество = StructuralObject.SetValidValue(value, true, "отчество");
                ReportPropertyChanged("отчество");
                OnотчествоChanged();
            }
        }
        private global::System.String _отчество;
        partial void OnотчествоChanging(global::System.String value);
        partial void OnотчествоChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime дата_рождения
        {
            get
            {
                return _дата_рождения;
            }
            set
            {
                Onдата_рожденияChanging(value);
                ReportPropertyChanging("дата_рождения");
                _дата_рождения = StructuralObject.SetValidValue(value, "дата_рождения");
                ReportPropertyChanged("дата_рождения");
                Onдата_рожденияChanged();
            }
        }
        private global::System.DateTime _дата_рождения;
        partial void Onдата_рожденияChanging(global::System.DateTime value);
        partial void Onдата_рожденияChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String номер_телефона
        {
            get
            {
                return _номер_телефона;
            }
            set
            {
                Onномер_телефонаChanging(value);
                ReportPropertyChanging("номер_телефона");
                _номер_телефона = StructuralObject.SetValidValue(value, true, "номер_телефона");
                ReportPropertyChanged("номер_телефона");
                Onномер_телефонаChanged();
            }
        }
        private global::System.String _номер_телефона;
        partial void Onномер_телефонаChanging(global::System.String value);
        partial void Onномер_телефонаChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkадминистраторID", "аунтификация_администратора")]
        public EntityCollection<аунтификация_администратора> аунтификация_администратора
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<аунтификация_администратора>("SkladTov3En.FkадминистраторID", "аунтификация_администратора");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<аунтификация_администратора>("SkladTov3En.FkадминистраторID", "аунтификация_администратора", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="адрес")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class адрес : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта адрес.
        /// </summary>
        /// <param name="iD_адреса">Исходное значение свойства ID_адреса.</param>
        /// <param name="страна">Исходное значение свойства страна.</param>
        /// <param name="город">Исходное значение свойства город.</param>
        /// <param name="улица">Исходное значение свойства улица.</param>
        /// <param name="дом">Исходное значение свойства дом.</param>
        public static адрес Createадрес(global::System.Int32 iD_адреса, global::System.String страна, global::System.String город, global::System.String улица, global::System.String дом)
        {
            адрес адрес = new адрес();
            адрес.ID_адреса = iD_адреса;
            адрес.страна = страна;
            адрес.город = город;
            адрес.улица = улица;
            адрес.дом = дом;
            return адрес;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_адреса
        {
            get
            {
                return _ID_адреса;
            }
            set
            {
                if (_ID_адреса != value)
                {
                    OnID_адресаChanging(value);
                    ReportPropertyChanging("ID_адреса");
                    _ID_адреса = StructuralObject.SetValidValue(value, "ID_адреса");
                    ReportPropertyChanged("ID_адреса");
                    OnID_адресаChanged();
                }
            }
        }
        private global::System.Int32 _ID_адреса;
        partial void OnID_адресаChanging(global::System.Int32 value);
        partial void OnID_адресаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String страна
        {
            get
            {
                return _страна;
            }
            set
            {
                OnстранаChanging(value);
                ReportPropertyChanging("страна");
                _страна = StructuralObject.SetValidValue(value, false, "страна");
                ReportPropertyChanged("страна");
                OnстранаChanged();
            }
        }
        private global::System.String _страна;
        partial void OnстранаChanging(global::System.String value);
        partial void OnстранаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String город
        {
            get
            {
                return _город;
            }
            set
            {
                OnгородChanging(value);
                ReportPropertyChanging("город");
                _город = StructuralObject.SetValidValue(value, false, "город");
                ReportPropertyChanged("город");
                OnгородChanged();
            }
        }
        private global::System.String _город;
        partial void OnгородChanging(global::System.String value);
        partial void OnгородChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String улица
        {
            get
            {
                return _улица;
            }
            set
            {
                OnулицаChanging(value);
                ReportPropertyChanging("улица");
                _улица = StructuralObject.SetValidValue(value, false, "улица");
                ReportPropertyChanged("улица");
                OnулицаChanged();
            }
        }
        private global::System.String _улица;
        partial void OnулицаChanging(global::System.String value);
        partial void OnулицаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String дом
        {
            get
            {
                return _дом;
            }
            set
            {
                OnдомChanging(value);
                ReportPropertyChanging("дом");
                _дом = StructuralObject.SetValidValue(value, false, "дом");
                ReportPropertyChanged("дом");
                OnдомChanged();
            }
        }
        private global::System.String _дом;
        partial void OnдомChanging(global::System.String value);
        partial void OnдомChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "Fkадрес1ID", "поставщики")]
        public EntityCollection<поставщики> поставщики
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<поставщики>("SkladTov3En.Fkадрес1ID", "поставщики");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<поставщики>("SkladTov3En.Fkадрес1ID", "поставщики", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkадресID", "склад")]
        public EntityCollection<склад> склад
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<склад>("SkladTov3En.FkадресID", "склад");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<склад>("SkladTov3En.FkадресID", "склад", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="аунтификация_администратора")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class аунтификация_администратора : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта аунтификация_администратора.
        /// </summary>
        /// <param name="iD_аунтиф_админа">Исходное значение свойства ID_аунтиф_админа.</param>
        /// <param name="iD_админ">Исходное значение свойства ID_админ.</param>
        /// <param name="логин">Исходное значение свойства логин.</param>
        /// <param name="пароль">Исходное значение свойства пароль.</param>
        public static аунтификация_администратора Createаунтификация_администратора(global::System.Int32 iD_аунтиф_админа, global::System.Int32 iD_админ, global::System.String логин, global::System.String пароль)
        {
            аунтификация_администратора аунтификация_администратора = new аунтификация_администратора();
            аунтификация_администратора.ID_аунтиф_админа = iD_аунтиф_админа;
            аунтификация_администратора.ID_админ = iD_админ;
            аунтификация_администратора.логин = логин;
            аунтификация_администратора.пароль = пароль;
            return аунтификация_администратора;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_аунтиф_админа
        {
            get
            {
                return _ID_аунтиф_админа;
            }
            set
            {
                if (_ID_аунтиф_админа != value)
                {
                    OnID_аунтиф_админаChanging(value);
                    ReportPropertyChanging("ID_аунтиф_админа");
                    _ID_аунтиф_админа = StructuralObject.SetValidValue(value, "ID_аунтиф_админа");
                    ReportPropertyChanged("ID_аунтиф_админа");
                    OnID_аунтиф_админаChanged();
                }
            }
        }
        private global::System.Int32 _ID_аунтиф_админа;
        partial void OnID_аунтиф_админаChanging(global::System.Int32 value);
        partial void OnID_аунтиф_админаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_админ
        {
            get
            {
                return _ID_админ;
            }
            set
            {
                OnID_админChanging(value);
                ReportPropertyChanging("ID_админ");
                _ID_админ = StructuralObject.SetValidValue(value, "ID_админ");
                ReportPropertyChanged("ID_админ");
                OnID_админChanged();
            }
        }
        private global::System.Int32 _ID_админ;
        partial void OnID_админChanging(global::System.Int32 value);
        partial void OnID_админChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String логин
        {
            get
            {
                return _логин;
            }
            set
            {
                OnлогинChanging(value);
                ReportPropertyChanging("логин");
                _логин = StructuralObject.SetValidValue(value, false, "логин");
                ReportPropertyChanged("логин");
                OnлогинChanged();
            }
        }
        private global::System.String _логин;
        partial void OnлогинChanging(global::System.String value);
        partial void OnлогинChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String пароль
        {
            get
            {
                return _пароль;
            }
            set
            {
                OnпарольChanging(value);
                ReportPropertyChanging("пароль");
                _пароль = StructuralObject.SetValidValue(value, false, "пароль");
                ReportPropertyChanged("пароль");
                OnпарольChanged();
            }
        }
        private global::System.String _пароль;
        partial void OnпарольChanging(global::System.String value);
        partial void OnпарольChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkадминистраторID", "администратор")]
        public администратор администратор
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<администратор>("SkladTov3En.FkадминистраторID", "администратор").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<администратор>("SkladTov3En.FkадминистраторID", "администратор").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<администратор> администраторReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<администратор>("SkladTov3En.FkадминистраторID", "администратор");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<администратор>("SkladTov3En.FkадминистраторID", "администратор", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="аунтификация_сотрудника")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class аунтификация_сотрудника : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта аунтификация_сотрудника.
        /// </summary>
        /// <param name="iD_аунтиф_сотруд">Исходное значение свойства ID_аунтиф_сотруд.</param>
        /// <param name="iD_сотрудник">Исходное значение свойства ID_сотрудник.</param>
        /// <param name="логин">Исходное значение свойства логин.</param>
        /// <param name="пароль">Исходное значение свойства пароль.</param>
        public static аунтификация_сотрудника Createаунтификация_сотрудника(global::System.Int32 iD_аунтиф_сотруд, global::System.Int32 iD_сотрудник, global::System.String логин, global::System.String пароль)
        {
            аунтификация_сотрудника аунтификация_сотрудника = new аунтификация_сотрудника();
            аунтификация_сотрудника.ID_аунтиф_сотруд = iD_аунтиф_сотруд;
            аунтификация_сотрудника.ID_сотрудник = iD_сотрудник;
            аунтификация_сотрудника.логин = логин;
            аунтификация_сотрудника.пароль = пароль;
            return аунтификация_сотрудника;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_аунтиф_сотруд
        {
            get
            {
                return _ID_аунтиф_сотруд;
            }
            set
            {
                if (_ID_аунтиф_сотруд != value)
                {
                    OnID_аунтиф_сотрудChanging(value);
                    ReportPropertyChanging("ID_аунтиф_сотруд");
                    _ID_аунтиф_сотруд = StructuralObject.SetValidValue(value, "ID_аунтиф_сотруд");
                    ReportPropertyChanged("ID_аунтиф_сотруд");
                    OnID_аунтиф_сотрудChanged();
                }
            }
        }
        private global::System.Int32 _ID_аунтиф_сотруд;
        partial void OnID_аунтиф_сотрудChanging(global::System.Int32 value);
        partial void OnID_аунтиф_сотрудChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_сотрудник
        {
            get
            {
                return _ID_сотрудник;
            }
            set
            {
                OnID_сотрудникChanging(value);
                ReportPropertyChanging("ID_сотрудник");
                _ID_сотрудник = StructuralObject.SetValidValue(value, "ID_сотрудник");
                ReportPropertyChanged("ID_сотрудник");
                OnID_сотрудникChanged();
            }
        }
        private global::System.Int32 _ID_сотрудник;
        partial void OnID_сотрудникChanging(global::System.Int32 value);
        partial void OnID_сотрудникChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String логин
        {
            get
            {
                return _логин;
            }
            set
            {
                OnлогинChanging(value);
                ReportPropertyChanging("логин");
                _логин = StructuralObject.SetValidValue(value, false, "логин");
                ReportPropertyChanged("логин");
                OnлогинChanged();
            }
        }
        private global::System.String _логин;
        partial void OnлогинChanging(global::System.String value);
        partial void OnлогинChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String пароль
        {
            get
            {
                return _пароль;
            }
            set
            {
                OnпарольChanging(value);
                ReportPropertyChanging("пароль");
                _пароль = StructuralObject.SetValidValue(value, false, "пароль");
                ReportPropertyChanged("пароль");
                OnпарольChanged();
            }
        }
        private global::System.String _пароль;
        partial void OnпарольChanging(global::System.String value);
        partial void OnпарольChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "Fkсотрудник3ID", "сотрудник")]
        public сотрудник сотрудник
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<сотрудник>("SkladTov3En.Fkсотрудник3ID", "сотрудник").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<сотрудник>("SkladTov3En.Fkсотрудник3ID", "сотрудник").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<сотрудник> сотрудникReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<сотрудник>("SkladTov3En.Fkсотрудник3ID", "сотрудник");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<сотрудник>("SkladTov3En.Fkсотрудник3ID", "сотрудник", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="инвентаризация_склада")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class инвентаризация_склада : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта инвентаризация_склада.
        /// </summary>
        /// <param name="iD_инвентаризация_склада">Исходное значение свойства ID_инвентаризация_склада.</param>
        /// <param name="дата_инвентаризации">Исходное значение свойства дата_инвентаризации.</param>
        /// <param name="iD_склада">Исходное значение свойства ID_склада.</param>
        /// <param name="iD_товара">Исходное значение свойства ID_товара.</param>
        /// <param name="расчетный_остаток">Исходное значение свойства расчетный_остаток.</param>
        /// <param name="фактический_остаток">Исходное значение свойства фактический_остаток.</param>
        /// <param name="iD_сотрудник">Исходное значение свойства ID_сотрудник.</param>
        public static инвентаризация_склада Createинвентаризация_склада(global::System.Int32 iD_инвентаризация_склада, global::System.DateTime дата_инвентаризации, global::System.Int32 iD_склада, global::System.Int32 iD_товара, global::System.Int32 расчетный_остаток, global::System.Int32 фактический_остаток, global::System.Int32 iD_сотрудник)
        {
            инвентаризация_склада инвентаризация_склада = new инвентаризация_склада();
            инвентаризация_склада.ID_инвентаризация_склада = iD_инвентаризация_склада;
            инвентаризация_склада.дата_инвентаризации = дата_инвентаризации;
            инвентаризация_склада.ID_склада = iD_склада;
            инвентаризация_склада.ID_товара = iD_товара;
            инвентаризация_склада.расчетный_остаток = расчетный_остаток;
            инвентаризация_склада.фактический_остаток = фактический_остаток;
            инвентаризация_склада.ID_сотрудник = iD_сотрудник;
            return инвентаризация_склада;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_инвентаризация_склада
        {
            get
            {
                return _ID_инвентаризация_склада;
            }
            set
            {
                if (_ID_инвентаризация_склада != value)
                {
                    OnID_инвентаризация_складаChanging(value);
                    ReportPropertyChanging("ID_инвентаризация_склада");
                    _ID_инвентаризация_склада = StructuralObject.SetValidValue(value, "ID_инвентаризация_склада");
                    ReportPropertyChanged("ID_инвентаризация_склада");
                    OnID_инвентаризация_складаChanged();
                }
            }
        }
        private global::System.Int32 _ID_инвентаризация_склада;
        partial void OnID_инвентаризация_складаChanging(global::System.Int32 value);
        partial void OnID_инвентаризация_складаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime дата_инвентаризации
        {
            get
            {
                return _дата_инвентаризации;
            }
            set
            {
                Onдата_инвентаризацииChanging(value);
                ReportPropertyChanging("дата_инвентаризации");
                _дата_инвентаризации = StructuralObject.SetValidValue(value, "дата_инвентаризации");
                ReportPropertyChanged("дата_инвентаризации");
                Onдата_инвентаризацииChanged();
            }
        }
        private global::System.DateTime _дата_инвентаризации;
        partial void Onдата_инвентаризацииChanging(global::System.DateTime value);
        partial void Onдата_инвентаризацииChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_склада
        {
            get
            {
                return _ID_склада;
            }
            set
            {
                OnID_складаChanging(value);
                ReportPropertyChanging("ID_склада");
                _ID_склада = StructuralObject.SetValidValue(value, "ID_склада");
                ReportPropertyChanged("ID_склада");
                OnID_складаChanged();
            }
        }
        private global::System.Int32 _ID_склада;
        partial void OnID_складаChanging(global::System.Int32 value);
        partial void OnID_складаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_товара
        {
            get
            {
                return _ID_товара;
            }
            set
            {
                OnID_товараChanging(value);
                ReportPropertyChanging("ID_товара");
                _ID_товара = StructuralObject.SetValidValue(value, "ID_товара");
                ReportPropertyChanged("ID_товара");
                OnID_товараChanged();
            }
        }
        private global::System.Int32 _ID_товара;
        partial void OnID_товараChanging(global::System.Int32 value);
        partial void OnID_товараChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 расчетный_остаток
        {
            get
            {
                return _расчетный_остаток;
            }
            set
            {
                Onрасчетный_остатокChanging(value);
                ReportPropertyChanging("расчетный_остаток");
                _расчетный_остаток = StructuralObject.SetValidValue(value, "расчетный_остаток");
                ReportPropertyChanged("расчетный_остаток");
                Onрасчетный_остатокChanged();
            }
        }
        private global::System.Int32 _расчетный_остаток;
        partial void Onрасчетный_остатокChanging(global::System.Int32 value);
        partial void Onрасчетный_остатокChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 фактический_остаток
        {
            get
            {
                return _фактический_остаток;
            }
            set
            {
                Onфактический_остатокChanging(value);
                ReportPropertyChanging("фактический_остаток");
                _фактический_остаток = StructuralObject.SetValidValue(value, "фактический_остаток");
                ReportPropertyChanged("фактический_остаток");
                Onфактический_остатокChanged();
            }
        }
        private global::System.Int32 _фактический_остаток;
        partial void Onфактический_остатокChanging(global::System.Int32 value);
        partial void Onфактический_остатокChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_сотрудник
        {
            get
            {
                return _ID_сотрудник;
            }
            set
            {
                OnID_сотрудникChanging(value);
                ReportPropertyChanging("ID_сотрудник");
                _ID_сотрудник = StructuralObject.SetValidValue(value, "ID_сотрудник");
                ReportPropertyChanged("ID_сотрудник");
                OnID_сотрудникChanged();
            }
        }
        private global::System.Int32 _ID_сотрудник;
        partial void OnID_сотрудникChanging(global::System.Int32 value);
        partial void OnID_сотрудникChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkскладID", "склад")]
        public склад склад
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<склад>("SkladTov3En.FkскладID", "склад").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<склад>("SkladTov3En.FkскладID", "склад").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<склад> складReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<склад>("SkladTov3En.FkскладID", "склад");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<склад>("SkladTov3En.FkскладID", "склад", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkсотрудникID", "сотрудник")]
        public сотрудник сотрудник
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<сотрудник>("SkladTov3En.FkсотрудникID", "сотрудник").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<сотрудник>("SkladTov3En.FkсотрудникID", "сотрудник").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<сотрудник> сотрудникReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<сотрудник>("SkladTov3En.FkсотрудникID", "сотрудник");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<сотрудник>("SkladTov3En.FkсотрудникID", "сотрудник", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkтоварыID", "товары")]
        public товары товары
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<товары>("SkladTov3En.FkтоварыID", "товары").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<товары>("SkladTov3En.FkтоварыID", "товары").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<товары> товарыReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<товары>("SkladTov3En.FkтоварыID", "товары");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<товары>("SkladTov3En.FkтоварыID", "товары", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="категория_товара")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class категория_товара : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта категория_товара.
        /// </summary>
        /// <param name="iD_категории_товара">Исходное значение свойства ID_категории_товара.</param>
        /// <param name="наименование">Исходное значение свойства наименование.</param>
        public static категория_товара Createкатегория_товара(global::System.Int32 iD_категории_товара, global::System.String наименование)
        {
            категория_товара категория_товара = new категория_товара();
            категория_товара.ID_категории_товара = iD_категории_товара;
            категория_товара.наименование = наименование;
            return категория_товара;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_категории_товара
        {
            get
            {
                return _ID_категории_товара;
            }
            set
            {
                if (_ID_категории_товара != value)
                {
                    OnID_категории_товараChanging(value);
                    ReportPropertyChanging("ID_категории_товара");
                    _ID_категории_товара = StructuralObject.SetValidValue(value, "ID_категории_товара");
                    ReportPropertyChanged("ID_категории_товара");
                    OnID_категории_товараChanged();
                }
            }
        }
        private global::System.Int32 _ID_категории_товара;
        partial void OnID_категории_товараChanging(global::System.Int32 value);
        partial void OnID_категории_товараChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String наименование
        {
            get
            {
                return _наименование;
            }
            set
            {
                OnнаименованиеChanging(value);
                ReportPropertyChanging("наименование");
                _наименование = StructuralObject.SetValidValue(value, false, "наименование");
                ReportPropertyChanged("наименование");
                OnнаименованиеChanged();
            }
        }
        private global::System.String _наименование;
        partial void OnнаименованиеChanging(global::System.String value);
        partial void OnнаименованиеChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "Fkкатегория_товараID", "товары")]
        public EntityCollection<товары> товары
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<товары>("SkladTov3En.Fkкатегория_товараID", "товары");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<товары>("SkladTov3En.Fkкатегория_товараID", "товары", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="пол")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class пол : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта пол.
        /// </summary>
        /// <param name="iD_пола">Исходное значение свойства ID_пола.</param>
        /// <param name="наименование">Исходное значение свойства наименование.</param>
        public static пол Createпол(global::System.Int32 iD_пола, global::System.String наименование)
        {
            пол пол = new пол();
            пол.ID_пола = iD_пола;
            пол.наименование = наименование;
            return пол;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_пола
        {
            get
            {
                return _ID_пола;
            }
            set
            {
                if (_ID_пола != value)
                {
                    OnID_полаChanging(value);
                    ReportPropertyChanging("ID_пола");
                    _ID_пола = StructuralObject.SetValidValue(value, "ID_пола");
                    ReportPropertyChanged("ID_пола");
                    OnID_полаChanged();
                }
            }
        }
        private global::System.Int32 _ID_пола;
        partial void OnID_полаChanging(global::System.Int32 value);
        partial void OnID_полаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String наименование
        {
            get
            {
                return _наименование;
            }
            set
            {
                OnнаименованиеChanging(value);
                ReportPropertyChanging("наименование");
                _наименование = StructuralObject.SetValidValue(value, false, "наименование");
                ReportPropertyChanged("наименование");
                OnнаименованиеChanged();
            }
        }
        private global::System.String _наименование;
        partial void OnнаименованиеChanging(global::System.String value);
        partial void OnнаименованиеChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkполID", "товары")]
        public EntityCollection<товары> товары
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<товары>("SkladTov3En.FkполID", "товары");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<товары>("SkladTov3En.FkполID", "товары", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="поставщики")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class поставщики : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта поставщики.
        /// </summary>
        /// <param name="iD_поставщиков">Исходное значение свойства ID_поставщиков.</param>
        /// <param name="наименование_поставщика">Исходное значение свойства наименование_поставщика.</param>
        /// <param name="почта">Исходное значение свойства почта.</param>
        /// <param name="номер_телефона">Исходное значение свойства номер_телефона.</param>
        /// <param name="iD_адреса">Исходное значение свойства ID_адреса.</param>
        /// <param name="фамилия">Исходное значение свойства фамилия.</param>
        /// <param name="имя">Исходное значение свойства имя.</param>
        /// <param name="иНН">Исходное значение свойства ИНН.</param>
        public static поставщики Createпоставщики(global::System.Int32 iD_поставщиков, global::System.String наименование_поставщика, global::System.String почта, global::System.String номер_телефона, global::System.Int32 iD_адреса, global::System.String фамилия, global::System.String имя, global::System.String иНН)
        {
            поставщики поставщики = new поставщики();
            поставщики.ID_поставщиков = iD_поставщиков;
            поставщики.наименование_поставщика = наименование_поставщика;
            поставщики.почта = почта;
            поставщики.номер_телефона = номер_телефона;
            поставщики.ID_адреса = iD_адреса;
            поставщики.фамилия = фамилия;
            поставщики.имя = имя;
            поставщики.ИНН = иНН;
            return поставщики;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_поставщиков
        {
            get
            {
                return _ID_поставщиков;
            }
            set
            {
                if (_ID_поставщиков != value)
                {
                    OnID_поставщиковChanging(value);
                    ReportPropertyChanging("ID_поставщиков");
                    _ID_поставщиков = StructuralObject.SetValidValue(value, "ID_поставщиков");
                    ReportPropertyChanged("ID_поставщиков");
                    OnID_поставщиковChanged();
                }
            }
        }
        private global::System.Int32 _ID_поставщиков;
        partial void OnID_поставщиковChanging(global::System.Int32 value);
        partial void OnID_поставщиковChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String наименование_поставщика
        {
            get
            {
                return _наименование_поставщика;
            }
            set
            {
                Onнаименование_поставщикаChanging(value);
                ReportPropertyChanging("наименование_поставщика");
                _наименование_поставщика = StructuralObject.SetValidValue(value, false, "наименование_поставщика");
                ReportPropertyChanged("наименование_поставщика");
                Onнаименование_поставщикаChanged();
            }
        }
        private global::System.String _наименование_поставщика;
        partial void Onнаименование_поставщикаChanging(global::System.String value);
        partial void Onнаименование_поставщикаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String почта
        {
            get
            {
                return _почта;
            }
            set
            {
                OnпочтаChanging(value);
                ReportPropertyChanging("почта");
                _почта = StructuralObject.SetValidValue(value, false, "почта");
                ReportPropertyChanged("почта");
                OnпочтаChanged();
            }
        }
        private global::System.String _почта;
        partial void OnпочтаChanging(global::System.String value);
        partial void OnпочтаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String номер_телефона
        {
            get
            {
                return _номер_телефона;
            }
            set
            {
                Onномер_телефонаChanging(value);
                ReportPropertyChanging("номер_телефона");
                _номер_телефона = StructuralObject.SetValidValue(value, false, "номер_телефона");
                ReportPropertyChanged("номер_телефона");
                Onномер_телефонаChanged();
            }
        }
        private global::System.String _номер_телефона;
        partial void Onномер_телефонаChanging(global::System.String value);
        partial void Onномер_телефонаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_адреса
        {
            get
            {
                return _ID_адреса;
            }
            set
            {
                OnID_адресаChanging(value);
                ReportPropertyChanging("ID_адреса");
                _ID_адреса = StructuralObject.SetValidValue(value, "ID_адреса");
                ReportPropertyChanged("ID_адреса");
                OnID_адресаChanged();
            }
        }
        private global::System.Int32 _ID_адреса;
        partial void OnID_адресаChanging(global::System.Int32 value);
        partial void OnID_адресаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String фамилия
        {
            get
            {
                return _фамилия;
            }
            set
            {
                OnфамилияChanging(value);
                ReportPropertyChanging("фамилия");
                _фамилия = StructuralObject.SetValidValue(value, false, "фамилия");
                ReportPropertyChanged("фамилия");
                OnфамилияChanged();
            }
        }
        private global::System.String _фамилия;
        partial void OnфамилияChanging(global::System.String value);
        partial void OnфамилияChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String имя
        {
            get
            {
                return _имя;
            }
            set
            {
                OnимяChanging(value);
                ReportPropertyChanging("имя");
                _имя = StructuralObject.SetValidValue(value, false, "имя");
                ReportPropertyChanged("имя");
                OnимяChanged();
            }
        }
        private global::System.String _имя;
        partial void OnимяChanging(global::System.String value);
        partial void OnимяChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String отчество
        {
            get
            {
                return _отчество;
            }
            set
            {
                OnотчествоChanging(value);
                ReportPropertyChanging("отчество");
                _отчество = StructuralObject.SetValidValue(value, true, "отчество");
                ReportPropertyChanged("отчество");
                OnотчествоChanged();
            }
        }
        private global::System.String _отчество;
        partial void OnотчествоChanging(global::System.String value);
        partial void OnотчествоChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ИНН
        {
            get
            {
                return _ИНН;
            }
            set
            {
                OnИННChanging(value);
                ReportPropertyChanging("ИНН");
                _ИНН = StructuralObject.SetValidValue(value, false, "ИНН");
                ReportPropertyChanged("ИНН");
                OnИННChanged();
            }
        }
        private global::System.String _ИНН;
        partial void OnИННChanging(global::System.String value);
        partial void OnИННChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "Fkадрес1ID", "адрес")]
        public адрес адрес
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<адрес>("SkladTov3En.Fkадрес1ID", "адрес").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<адрес>("SkladTov3En.Fkадрес1ID", "адрес").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<адрес> адресReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<адрес>("SkladTov3En.Fkадрес1ID", "адрес");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<адрес>("SkladTov3En.Fkадрес1ID", "адрес", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkпоставщикиID", "товары")]
        public EntityCollection<товары> товары
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<товары>("SkladTov3En.FkпоставщикиID", "товары");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<товары>("SkladTov3En.FkпоставщикиID", "товары", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="приемка_товара")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class приемка_товара : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта приемка_товара.
        /// </summary>
        /// <param name="iD_приемка_товара">Исходное значение свойства ID_приемка_товара.</param>
        /// <param name="iD_товара">Исходное значение свойства ID_товара.</param>
        /// <param name="iD_статуса_качества_товара">Исходное значение свойства ID_статуса_качества_товара.</param>
        /// <param name="количество_поступления">Исходное значение свойства количество_поступления.</param>
        /// <param name="количество_принятого_товара">Исходное значение свойства количество_принятого_товара.</param>
        /// <param name="iD_сотрудник">Исходное значение свойства ID_сотрудник.</param>
        public static приемка_товара Createприемка_товара(global::System.Int32 iD_приемка_товара, global::System.Int32 iD_товара, global::System.Int32 iD_статуса_качества_товара, global::System.Int32 количество_поступления, global::System.Int32 количество_принятого_товара, global::System.Int32 iD_сотрудник)
        {
            приемка_товара приемка_товара = new приемка_товара();
            приемка_товара.ID_приемка_товара = iD_приемка_товара;
            приемка_товара.ID_товара = iD_товара;
            приемка_товара.ID_статуса_качества_товара = iD_статуса_качества_товара;
            приемка_товара.количество_поступления = количество_поступления;
            приемка_товара.количество_принятого_товара = количество_принятого_товара;
            приемка_товара.ID_сотрудник = iD_сотрудник;
            return приемка_товара;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_приемка_товара
        {
            get
            {
                return _ID_приемка_товара;
            }
            set
            {
                if (_ID_приемка_товара != value)
                {
                    OnID_приемка_товараChanging(value);
                    ReportPropertyChanging("ID_приемка_товара");
                    _ID_приемка_товара = StructuralObject.SetValidValue(value, "ID_приемка_товара");
                    ReportPropertyChanged("ID_приемка_товара");
                    OnID_приемка_товараChanged();
                }
            }
        }
        private global::System.Int32 _ID_приемка_товара;
        partial void OnID_приемка_товараChanging(global::System.Int32 value);
        partial void OnID_приемка_товараChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_товара
        {
            get
            {
                return _ID_товара;
            }
            set
            {
                OnID_товараChanging(value);
                ReportPropertyChanging("ID_товара");
                _ID_товара = StructuralObject.SetValidValue(value, "ID_товара");
                ReportPropertyChanged("ID_товара");
                OnID_товараChanged();
            }
        }
        private global::System.Int32 _ID_товара;
        partial void OnID_товараChanging(global::System.Int32 value);
        partial void OnID_товараChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_статуса_качества_товара
        {
            get
            {
                return _ID_статуса_качества_товара;
            }
            set
            {
                OnID_статуса_качества_товараChanging(value);
                ReportPropertyChanging("ID_статуса_качества_товара");
                _ID_статуса_качества_товара = StructuralObject.SetValidValue(value, "ID_статуса_качества_товара");
                ReportPropertyChanged("ID_статуса_качества_товара");
                OnID_статуса_качества_товараChanged();
            }
        }
        private global::System.Int32 _ID_статуса_качества_товара;
        partial void OnID_статуса_качества_товараChanging(global::System.Int32 value);
        partial void OnID_статуса_качества_товараChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 количество_поступления
        {
            get
            {
                return _количество_поступления;
            }
            set
            {
                Onколичество_поступленияChanging(value);
                ReportPropertyChanging("количество_поступления");
                _количество_поступления = StructuralObject.SetValidValue(value, "количество_поступления");
                ReportPropertyChanged("количество_поступления");
                Onколичество_поступленияChanged();
            }
        }
        private global::System.Int32 _количество_поступления;
        partial void Onколичество_поступленияChanging(global::System.Int32 value);
        partial void Onколичество_поступленияChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 количество_принятого_товара
        {
            get
            {
                return _количество_принятого_товара;
            }
            set
            {
                Onколичество_принятого_товараChanging(value);
                ReportPropertyChanging("количество_принятого_товара");
                _количество_принятого_товара = StructuralObject.SetValidValue(value, "количество_принятого_товара");
                ReportPropertyChanged("количество_принятого_товара");
                Onколичество_принятого_товараChanged();
            }
        }
        private global::System.Int32 _количество_принятого_товара;
        partial void Onколичество_принятого_товараChanging(global::System.Int32 value);
        partial void Onколичество_принятого_товараChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_сотрудник
        {
            get
            {
                return _ID_сотрудник;
            }
            set
            {
                OnID_сотрудникChanging(value);
                ReportPropertyChanging("ID_сотрудник");
                _ID_сотрудник = StructuralObject.SetValidValue(value, "ID_сотрудник");
                ReportPropertyChanged("ID_сотрудник");
                OnID_сотрудникChanged();
            }
        }
        private global::System.Int32 _ID_сотрудник;
        partial void OnID_сотрудникChanging(global::System.Int32 value);
        partial void OnID_сотрудникChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "Fkсотрудник1ID", "сотрудник")]
        public сотрудник сотрудник
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<сотрудник>("SkladTov3En.Fkсотрудник1ID", "сотрудник").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<сотрудник>("SkladTov3En.Fkсотрудник1ID", "сотрудник").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<сотрудник> сотрудникReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<сотрудник>("SkladTov3En.Fkсотрудник1ID", "сотрудник");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<сотрудник>("SkladTov3En.Fkсотрудник1ID", "сотрудник", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "Fkстатус_качества_товараID", "статус_качества_товара")]
        public статус_качества_товара статус_качества_товара
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<статус_качества_товара>("SkladTov3En.Fkстатус_качества_товараID", "статус_качества_товара").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<статус_качества_товара>("SkladTov3En.Fkстатус_качества_товараID", "статус_качества_товара").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<статус_качества_товара> статус_качества_товараReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<статус_качества_товара>("SkladTov3En.Fkстатус_качества_товараID", "статус_качества_товара");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<статус_качества_товара>("SkladTov3En.Fkстатус_качества_товараID", "статус_качества_товара", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "Fkтовары2ID", "товары")]
        public товары товары
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<товары>("SkladTov3En.Fkтовары2ID", "товары").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<товары>("SkladTov3En.Fkтовары2ID", "товары").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<товары> товарыReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<товары>("SkladTov3En.Fkтовары2ID", "товары");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<товары>("SkladTov3En.Fkтовары2ID", "товары", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="размеры")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class размеры : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта размеры.
        /// </summary>
        /// <param name="iD_размера_одежды">Исходное значение свойства ID_размера_одежды.</param>
        /// <param name="европейский">Исходное значение свойства европейский.</param>
        /// <param name="российский">Исходное значение свойства российский.</param>
        public static размеры Createразмеры(global::System.Int32 iD_размера_одежды, global::System.Int32 европейский, global::System.Int32 российский)
        {
            размеры размеры = new размеры();
            размеры.ID_размера_одежды = iD_размера_одежды;
            размеры.европейский = европейский;
            размеры.российский = российский;
            return размеры;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_размера_одежды
        {
            get
            {
                return _ID_размера_одежды;
            }
            set
            {
                if (_ID_размера_одежды != value)
                {
                    OnID_размера_одеждыChanging(value);
                    ReportPropertyChanging("ID_размера_одежды");
                    _ID_размера_одежды = StructuralObject.SetValidValue(value, "ID_размера_одежды");
                    ReportPropertyChanged("ID_размера_одежды");
                    OnID_размера_одеждыChanged();
                }
            }
        }
        private global::System.Int32 _ID_размера_одежды;
        partial void OnID_размера_одеждыChanging(global::System.Int32 value);
        partial void OnID_размера_одеждыChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 европейский
        {
            get
            {
                return _европейский;
            }
            set
            {
                OnевропейскийChanging(value);
                ReportPropertyChanging("европейский");
                _европейский = StructuralObject.SetValidValue(value, "европейский");
                ReportPropertyChanged("европейский");
                OnевропейскийChanged();
            }
        }
        private global::System.Int32 _европейский;
        partial void OnевропейскийChanging(global::System.Int32 value);
        partial void OnевропейскийChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 российский
        {
            get
            {
                return _российский;
            }
            set
            {
                OnроссийскийChanging(value);
                ReportPropertyChanging("российский");
                _российский = StructuralObject.SetValidValue(value, "российский");
                ReportPropertyChanged("российский");
                OnроссийскийChanged();
            }
        }
        private global::System.Int32 _российский;
        partial void OnроссийскийChanging(global::System.Int32 value);
        partial void OnроссийскийChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkразмерыID", "товары")]
        public EntityCollection<товары> товары
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<товары>("SkladTov3En.FkразмерыID", "товары");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<товары>("SkladTov3En.FkразмерыID", "товары", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="склад")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class склад : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта склад.
        /// </summary>
        /// <param name="iD_склада">Исходное значение свойства ID_склада.</param>
        /// <param name="наименование">Исходное значение свойства наименование.</param>
        /// <param name="iD_адреса">Исходное значение свойства ID_адреса.</param>
        public static склад Createсклад(global::System.Int32 iD_склада, global::System.String наименование, global::System.Int32 iD_адреса)
        {
            склад склад = new склад();
            склад.ID_склада = iD_склада;
            склад.наименование = наименование;
            склад.ID_адреса = iD_адреса;
            return склад;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_склада
        {
            get
            {
                return _ID_склада;
            }
            set
            {
                if (_ID_склада != value)
                {
                    OnID_складаChanging(value);
                    ReportPropertyChanging("ID_склада");
                    _ID_склада = StructuralObject.SetValidValue(value, "ID_склада");
                    ReportPropertyChanged("ID_склада");
                    OnID_складаChanged();
                }
            }
        }
        private global::System.Int32 _ID_склада;
        partial void OnID_складаChanging(global::System.Int32 value);
        partial void OnID_складаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String наименование
        {
            get
            {
                return _наименование;
            }
            set
            {
                OnнаименованиеChanging(value);
                ReportPropertyChanging("наименование");
                _наименование = StructuralObject.SetValidValue(value, false, "наименование");
                ReportPropertyChanged("наименование");
                OnнаименованиеChanged();
            }
        }
        private global::System.String _наименование;
        partial void OnнаименованиеChanging(global::System.String value);
        partial void OnнаименованиеChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_адреса
        {
            get
            {
                return _ID_адреса;
            }
            set
            {
                OnID_адресаChanging(value);
                ReportPropertyChanging("ID_адреса");
                _ID_адреса = StructuralObject.SetValidValue(value, "ID_адреса");
                ReportPropertyChanged("ID_адреса");
                OnID_адресаChanged();
            }
        }
        private global::System.Int32 _ID_адреса;
        partial void OnID_адресаChanging(global::System.Int32 value);
        partial void OnID_адресаChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkадресID", "адрес")]
        public адрес адрес
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<адрес>("SkladTov3En.FkадресID", "адрес").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<адрес>("SkladTov3En.FkадресID", "адрес").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<адрес> адресReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<адрес>("SkladTov3En.FkадресID", "адрес");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<адрес>("SkladTov3En.FkадресID", "адрес", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkскладID", "инвентаризация_склада")]
        public EntityCollection<инвентаризация_склада> инвентаризация_склада
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<инвентаризация_склада>("SkladTov3En.FkскладID", "инвентаризация_склада");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<инвентаризация_склада>("SkladTov3En.FkскладID", "инвентаризация_склада", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "Fkсклад1ID", "товары_на_складе")]
        public EntityCollection<товары_на_складе> товары_на_складе
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<товары_на_складе>("SkladTov3En.Fkсклад1ID", "товары_на_складе");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<товары_на_складе>("SkladTov3En.Fkсклад1ID", "товары_на_складе", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="сотрудник")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class сотрудник : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта сотрудник.
        /// </summary>
        /// <param name="iD_сотрудник">Исходное значение свойства ID_сотрудник.</param>
        /// <param name="фамилия">Исходное значение свойства фамилия.</param>
        /// <param name="имя">Исходное значение свойства имя.</param>
        /// <param name="дата_рождения">Исходное значение свойства дата_рождения.</param>
        public static сотрудник Createсотрудник(global::System.Int32 iD_сотрудник, global::System.String фамилия, global::System.String имя, global::System.DateTime дата_рождения)
        {
            сотрудник сотрудник = new сотрудник();
            сотрудник.ID_сотрудник = iD_сотрудник;
            сотрудник.фамилия = фамилия;
            сотрудник.имя = имя;
            сотрудник.дата_рождения = дата_рождения;
            return сотрудник;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_сотрудник
        {
            get
            {
                return _ID_сотрудник;
            }
            set
            {
                if (_ID_сотрудник != value)
                {
                    OnID_сотрудникChanging(value);
                    ReportPropertyChanging("ID_сотрудник");
                    _ID_сотрудник = StructuralObject.SetValidValue(value, "ID_сотрудник");
                    ReportPropertyChanged("ID_сотрудник");
                    OnID_сотрудникChanged();
                }
            }
        }
        private global::System.Int32 _ID_сотрудник;
        partial void OnID_сотрудникChanging(global::System.Int32 value);
        partial void OnID_сотрудникChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String фамилия
        {
            get
            {
                return _фамилия;
            }
            set
            {
                OnфамилияChanging(value);
                ReportPropertyChanging("фамилия");
                _фамилия = StructuralObject.SetValidValue(value, false, "фамилия");
                ReportPropertyChanged("фамилия");
                OnфамилияChanged();
            }
        }
        private global::System.String _фамилия;
        partial void OnфамилияChanging(global::System.String value);
        partial void OnфамилияChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String имя
        {
            get
            {
                return _имя;
            }
            set
            {
                OnимяChanging(value);
                ReportPropertyChanging("имя");
                _имя = StructuralObject.SetValidValue(value, false, "имя");
                ReportPropertyChanged("имя");
                OnимяChanged();
            }
        }
        private global::System.String _имя;
        partial void OnимяChanging(global::System.String value);
        partial void OnимяChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String отчество
        {
            get
            {
                return _отчество;
            }
            set
            {
                OnотчествоChanging(value);
                ReportPropertyChanging("отчество");
                _отчество = StructuralObject.SetValidValue(value, true, "отчество");
                ReportPropertyChanged("отчество");
                OnотчествоChanged();
            }
        }
        private global::System.String _отчество;
        partial void OnотчествоChanging(global::System.String value);
        partial void OnотчествоChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime дата_рождения
        {
            get
            {
                return _дата_рождения;
            }
            set
            {
                Onдата_рожденияChanging(value);
                ReportPropertyChanging("дата_рождения");
                _дата_рождения = StructuralObject.SetValidValue(value, "дата_рождения");
                ReportPropertyChanged("дата_рождения");
                Onдата_рожденияChanged();
            }
        }
        private global::System.DateTime _дата_рождения;
        partial void Onдата_рожденияChanging(global::System.DateTime value);
        partial void Onдата_рожденияChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String номер_телефона
        {
            get
            {
                return _номер_телефона;
            }
            set
            {
                Onномер_телефонаChanging(value);
                ReportPropertyChanging("номер_телефона");
                _номер_телефона = StructuralObject.SetValidValue(value, true, "номер_телефона");
                ReportPropertyChanged("номер_телефона");
                Onномер_телефонаChanged();
            }
        }
        private global::System.String _номер_телефона;
        partial void Onномер_телефонаChanging(global::System.String value);
        partial void Onномер_телефонаChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "Fkсотрудник3ID", "аунтификация_сотрудника")]
        public EntityCollection<аунтификация_сотрудника> аунтификация_сотрудника
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<аунтификация_сотрудника>("SkladTov3En.Fkсотрудник3ID", "аунтификация_сотрудника");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<аунтификация_сотрудника>("SkladTov3En.Fkсотрудник3ID", "аунтификация_сотрудника", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkсотрудникID", "инвентаризация_склада")]
        public EntityCollection<инвентаризация_склада> инвентаризация_склада
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<инвентаризация_склада>("SkladTov3En.FkсотрудникID", "инвентаризация_склада");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<инвентаризация_склада>("SkladTov3En.FkсотрудникID", "инвентаризация_склада", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "Fkсотрудник1ID", "приемка_товара")]
        public EntityCollection<приемка_товара> приемка_товара
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<приемка_товара>("SkladTov3En.Fkсотрудник1ID", "приемка_товара");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<приемка_товара>("SkladTov3En.Fkсотрудник1ID", "приемка_товара", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="статус_качества_товара")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class статус_качества_товара : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта статус_качества_товара.
        /// </summary>
        /// <param name="iD_статуса_качества_товара">Исходное значение свойства ID_статуса_качества_товара.</param>
        /// <param name="наименование_статуса">Исходное значение свойства наименование_статуса.</param>
        public static статус_качества_товара Createстатус_качества_товара(global::System.Int32 iD_статуса_качества_товара, global::System.String наименование_статуса)
        {
            статус_качества_товара статус_качества_товара = new статус_качества_товара();
            статус_качества_товара.ID_статуса_качества_товара = iD_статуса_качества_товара;
            статус_качества_товара.наименование_статуса = наименование_статуса;
            return статус_качества_товара;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_статуса_качества_товара
        {
            get
            {
                return _ID_статуса_качества_товара;
            }
            set
            {
                if (_ID_статуса_качества_товара != value)
                {
                    OnID_статуса_качества_товараChanging(value);
                    ReportPropertyChanging("ID_статуса_качества_товара");
                    _ID_статуса_качества_товара = StructuralObject.SetValidValue(value, "ID_статуса_качества_товара");
                    ReportPropertyChanged("ID_статуса_качества_товара");
                    OnID_статуса_качества_товараChanged();
                }
            }
        }
        private global::System.Int32 _ID_статуса_качества_товара;
        partial void OnID_статуса_качества_товараChanging(global::System.Int32 value);
        partial void OnID_статуса_качества_товараChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String наименование_статуса
        {
            get
            {
                return _наименование_статуса;
            }
            set
            {
                Onнаименование_статусаChanging(value);
                ReportPropertyChanging("наименование_статуса");
                _наименование_статуса = StructuralObject.SetValidValue(value, false, "наименование_статуса");
                ReportPropertyChanged("наименование_статуса");
                Onнаименование_статусаChanged();
            }
        }
        private global::System.String _наименование_статуса;
        partial void Onнаименование_статусаChanging(global::System.String value);
        partial void Onнаименование_статусаChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "Fkстатус_качества_товараID", "приемка_товара")]
        public EntityCollection<приемка_товара> приемка_товара
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<приемка_товара>("SkladTov3En.Fkстатус_качества_товараID", "приемка_товара");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<приемка_товара>("SkladTov3En.Fkстатус_качества_товараID", "приемка_товара", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="товары")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class товары : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта товары.
        /// </summary>
        /// <param name="iD_товара">Исходное значение свойства ID_товара.</param>
        /// <param name="артикул">Исходное значение свойства артикул.</param>
        /// <param name="наименование_товара">Исходное значение свойства наименование_товара.</param>
        /// <param name="фото">Исходное значение свойства фото.</param>
        /// <param name="iD_категории_товара">Исходное значение свойства ID_категории_товара.</param>
        /// <param name="iD_пола">Исходное значение свойства ID_пола.</param>
        /// <param name="iD_размера_одежды">Исходное значение свойства ID_размера_одежды.</param>
        /// <param name="iD_цвета">Исходное значение свойства ID_цвета.</param>
        /// <param name="цена">Исходное значение свойства цена.</param>
        /// <param name="описание">Исходное значение свойства описание.</param>
        /// <param name="состав">Исходное значение свойства состав.</param>
        /// <param name="iD_поставщиков">Исходное значение свойства ID_поставщиков.</param>
        public static товары Createтовары(global::System.Int32 iD_товара, global::System.String артикул, global::System.String наименование_товара, global::System.String фото, global::System.Int32 iD_категории_товара, global::System.Int32 iD_пола, global::System.Int32 iD_размера_одежды, global::System.Int32 iD_цвета, global::System.Double цена, global::System.String описание, global::System.String состав, global::System.Int32 iD_поставщиков)
        {
            товары товары = new товары();
            товары.ID_товара = iD_товара;
            товары.артикул = артикул;
            товары.наименование_товара = наименование_товара;
            товары.фото = фото;
            товары.ID_категории_товара = iD_категории_товара;
            товары.ID_пола = iD_пола;
            товары.ID_размера_одежды = iD_размера_одежды;
            товары.ID_цвета = iD_цвета;
            товары.цена = цена;
            товары.описание = описание;
            товары.состав = состав;
            товары.ID_поставщиков = iD_поставщиков;
            return товары;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_товара
        {
            get
            {
                return _ID_товара;
            }
            set
            {
                if (_ID_товара != value)
                {
                    OnID_товараChanging(value);
                    ReportPropertyChanging("ID_товара");
                    _ID_товара = StructuralObject.SetValidValue(value, "ID_товара");
                    ReportPropertyChanged("ID_товара");
                    OnID_товараChanged();
                }
            }
        }
        private global::System.Int32 _ID_товара;
        partial void OnID_товараChanging(global::System.Int32 value);
        partial void OnID_товараChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String артикул
        {
            get
            {
                return _артикул;
            }
            set
            {
                OnартикулChanging(value);
                ReportPropertyChanging("артикул");
                _артикул = StructuralObject.SetValidValue(value, false, "артикул");
                ReportPropertyChanged("артикул");
                OnартикулChanged();
            }
        }
        private global::System.String _артикул;
        partial void OnартикулChanging(global::System.String value);
        partial void OnартикулChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String наименование_товара
        {
            get
            {
                return _наименование_товара;
            }
            set
            {
                Onнаименование_товараChanging(value);
                ReportPropertyChanging("наименование_товара");
                _наименование_товара = StructuralObject.SetValidValue(value, false, "наименование_товара");
                ReportPropertyChanged("наименование_товара");
                Onнаименование_товараChanged();
            }
        }
        private global::System.String _наименование_товара;
        partial void Onнаименование_товараChanging(global::System.String value);
        partial void Onнаименование_товараChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String фото
        {
            get
            {
                return _фото;
            }
            set
            {
                OnфотоChanging(value);
                ReportPropertyChanging("фото");
                _фото = StructuralObject.SetValidValue(value, false, "фото");
                ReportPropertyChanged("фото");
                OnфотоChanged();
            }
        }
        private global::System.String _фото;
        partial void OnфотоChanging(global::System.String value);
        partial void OnфотоChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_категории_товара
        {
            get
            {
                return _ID_категории_товара;
            }
            set
            {
                OnID_категории_товараChanging(value);
                ReportPropertyChanging("ID_категории_товара");
                _ID_категории_товара = StructuralObject.SetValidValue(value, "ID_категории_товара");
                ReportPropertyChanged("ID_категории_товара");
                OnID_категории_товараChanged();
            }
        }
        private global::System.Int32 _ID_категории_товара;
        partial void OnID_категории_товараChanging(global::System.Int32 value);
        partial void OnID_категории_товараChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_пола
        {
            get
            {
                return _ID_пола;
            }
            set
            {
                OnID_полаChanging(value);
                ReportPropertyChanging("ID_пола");
                _ID_пола = StructuralObject.SetValidValue(value, "ID_пола");
                ReportPropertyChanged("ID_пола");
                OnID_полаChanged();
            }
        }
        private global::System.Int32 _ID_пола;
        partial void OnID_полаChanging(global::System.Int32 value);
        partial void OnID_полаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_размера_одежды
        {
            get
            {
                return _ID_размера_одежды;
            }
            set
            {
                OnID_размера_одеждыChanging(value);
                ReportPropertyChanging("ID_размера_одежды");
                _ID_размера_одежды = StructuralObject.SetValidValue(value, "ID_размера_одежды");
                ReportPropertyChanged("ID_размера_одежды");
                OnID_размера_одеждыChanged();
            }
        }
        private global::System.Int32 _ID_размера_одежды;
        partial void OnID_размера_одеждыChanging(global::System.Int32 value);
        partial void OnID_размера_одеждыChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_цвета
        {
            get
            {
                return _ID_цвета;
            }
            set
            {
                OnID_цветаChanging(value);
                ReportPropertyChanging("ID_цвета");
                _ID_цвета = StructuralObject.SetValidValue(value, "ID_цвета");
                ReportPropertyChanged("ID_цвета");
                OnID_цветаChanged();
            }
        }
        private global::System.Int32 _ID_цвета;
        partial void OnID_цветаChanging(global::System.Int32 value);
        partial void OnID_цветаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double цена
        {
            get
            {
                return _цена;
            }
            set
            {
                OnценаChanging(value);
                ReportPropertyChanging("цена");
                _цена = StructuralObject.SetValidValue(value, "цена");
                ReportPropertyChanged("цена");
                OnценаChanged();
            }
        }
        private global::System.Double _цена;
        partial void OnценаChanging(global::System.Double value);
        partial void OnценаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String описание
        {
            get
            {
                return _описание;
            }
            set
            {
                OnописаниеChanging(value);
                ReportPropertyChanging("описание");
                _описание = StructuralObject.SetValidValue(value, false, "описание");
                ReportPropertyChanged("описание");
                OnописаниеChanged();
            }
        }
        private global::System.String _описание;
        partial void OnописаниеChanging(global::System.String value);
        partial void OnописаниеChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String состав
        {
            get
            {
                return _состав;
            }
            set
            {
                OnсоставChanging(value);
                ReportPropertyChanging("состав");
                _состав = StructuralObject.SetValidValue(value, false, "состав");
                ReportPropertyChanged("состав");
                OnсоставChanged();
            }
        }
        private global::System.String _состав;
        partial void OnсоставChanging(global::System.String value);
        partial void OnсоставChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_поставщиков
        {
            get
            {
                return _ID_поставщиков;
            }
            set
            {
                OnID_поставщиковChanging(value);
                ReportPropertyChanging("ID_поставщиков");
                _ID_поставщиков = StructuralObject.SetValidValue(value, "ID_поставщиков");
                ReportPropertyChanged("ID_поставщиков");
                OnID_поставщиковChanged();
            }
        }
        private global::System.Int32 _ID_поставщиков;
        partial void OnID_поставщиковChanging(global::System.Int32 value);
        partial void OnID_поставщиковChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkтоварыID", "инвентаризация_склада")]
        public EntityCollection<инвентаризация_склада> инвентаризация_склада
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<инвентаризация_склада>("SkladTov3En.FkтоварыID", "инвентаризация_склада");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<инвентаризация_склада>("SkladTov3En.FkтоварыID", "инвентаризация_склада", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "Fkкатегория_товараID", "категория_товара")]
        public категория_товара категория_товара
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<категория_товара>("SkladTov3En.Fkкатегория_товараID", "категория_товара").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<категория_товара>("SkladTov3En.Fkкатегория_товараID", "категория_товара").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<категория_товара> категория_товараReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<категория_товара>("SkladTov3En.Fkкатегория_товараID", "категория_товара");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<категория_товара>("SkladTov3En.Fkкатегория_товараID", "категория_товара", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkполID", "пол")]
        public пол пол
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<пол>("SkladTov3En.FkполID", "пол").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<пол>("SkladTov3En.FkполID", "пол").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<пол> полReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<пол>("SkladTov3En.FkполID", "пол");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<пол>("SkladTov3En.FkполID", "пол", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkпоставщикиID", "поставщики")]
        public поставщики поставщики
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<поставщики>("SkladTov3En.FkпоставщикиID", "поставщики").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<поставщики>("SkladTov3En.FkпоставщикиID", "поставщики").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<поставщики> поставщикиReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<поставщики>("SkladTov3En.FkпоставщикиID", "поставщики");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<поставщики>("SkladTov3En.FkпоставщикиID", "поставщики", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "Fkтовары2ID", "приемка_товара")]
        public EntityCollection<приемка_товара> приемка_товара
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<приемка_товара>("SkladTov3En.Fkтовары2ID", "приемка_товара");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<приемка_товара>("SkladTov3En.Fkтовары2ID", "приемка_товара", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkразмерыID", "размеры")]
        public размеры размеры
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<размеры>("SkladTov3En.FkразмерыID", "размеры").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<размеры>("SkladTov3En.FkразмерыID", "размеры").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<размеры> размерыReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<размеры>("SkladTov3En.FkразмерыID", "размеры");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<размеры>("SkladTov3En.FkразмерыID", "размеры", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "Fkтовары1ID", "товары_на_складе")]
        public EntityCollection<товары_на_складе> товары_на_складе
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<товары_на_складе>("SkladTov3En.Fkтовары1ID", "товары_на_складе");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<товары_на_складе>("SkladTov3En.Fkтовары1ID", "товары_на_складе", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkцветID", "цвет")]
        public цвет цвет
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<цвет>("SkladTov3En.FkцветID", "цвет").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<цвет>("SkladTov3En.FkцветID", "цвет").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<цвет> цветReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<цвет>("SkladTov3En.FkцветID", "цвет");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<цвет>("SkladTov3En.FkцветID", "цвет", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="товары_на_складе")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class товары_на_складе : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта товары_на_складе.
        /// </summary>
        /// <param name="iD_товары_на_складе">Исходное значение свойства ID_товары_на_складе.</param>
        /// <param name="iD_склада">Исходное значение свойства ID_склада.</param>
        /// <param name="iD_товара">Исходное значение свойства ID_товара.</param>
        public static товары_на_складе Createтовары_на_складе(global::System.Int32 iD_товары_на_складе, global::System.Int32 iD_склада, global::System.Int32 iD_товара)
        {
            товары_на_складе товары_на_складе = new товары_на_складе();
            товары_на_складе.ID_товары_на_складе = iD_товары_на_складе;
            товары_на_складе.ID_склада = iD_склада;
            товары_на_складе.ID_товара = iD_товара;
            return товары_на_складе;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_товары_на_складе
        {
            get
            {
                return _ID_товары_на_складе;
            }
            set
            {
                if (_ID_товары_на_складе != value)
                {
                    OnID_товары_на_складеChanging(value);
                    ReportPropertyChanging("ID_товары_на_складе");
                    _ID_товары_на_складе = StructuralObject.SetValidValue(value, "ID_товары_на_складе");
                    ReportPropertyChanged("ID_товары_на_складе");
                    OnID_товары_на_складеChanged();
                }
            }
        }
        private global::System.Int32 _ID_товары_на_складе;
        partial void OnID_товары_на_складеChanging(global::System.Int32 value);
        partial void OnID_товары_на_складеChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_склада
        {
            get
            {
                return _ID_склада;
            }
            set
            {
                OnID_складаChanging(value);
                ReportPropertyChanging("ID_склада");
                _ID_склада = StructuralObject.SetValidValue(value, "ID_склада");
                ReportPropertyChanged("ID_склада");
                OnID_складаChanged();
            }
        }
        private global::System.Int32 _ID_склада;
        partial void OnID_складаChanging(global::System.Int32 value);
        partial void OnID_складаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_товара
        {
            get
            {
                return _ID_товара;
            }
            set
            {
                OnID_товараChanging(value);
                ReportPropertyChanging("ID_товара");
                _ID_товара = StructuralObject.SetValidValue(value, "ID_товара");
                ReportPropertyChanged("ID_товара");
                OnID_товараChanged();
            }
        }
        private global::System.Int32 _ID_товара;
        partial void OnID_товараChanging(global::System.Int32 value);
        partial void OnID_товараChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "Fkсклад1ID", "склад")]
        public склад склад
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<склад>("SkladTov3En.Fkсклад1ID", "склад").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<склад>("SkladTov3En.Fkсклад1ID", "склад").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<склад> складReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<склад>("SkladTov3En.Fkсклад1ID", "склад");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<склад>("SkladTov3En.Fkсклад1ID", "склад", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "Fkтовары1ID", "товары")]
        public товары товары
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<товары>("SkladTov3En.Fkтовары1ID", "товары").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<товары>("SkladTov3En.Fkтовары1ID", "товары").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<товары> товарыReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<товары>("SkladTov3En.Fkтовары1ID", "товары");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<товары>("SkladTov3En.Fkтовары1ID", "товары", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SkladTov3En", Name="цвет")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class цвет : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта цвет.
        /// </summary>
        /// <param name="iD_цвета">Исходное значение свойства ID_цвета.</param>
        /// <param name="наименование">Исходное значение свойства наименование.</param>
        public static цвет Createцвет(global::System.Int32 iD_цвета, global::System.String наименование)
        {
            цвет цвет = new цвет();
            цвет.ID_цвета = iD_цвета;
            цвет.наименование = наименование;
            return цвет;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID_цвета
        {
            get
            {
                return _ID_цвета;
            }
            set
            {
                if (_ID_цвета != value)
                {
                    OnID_цветаChanging(value);
                    ReportPropertyChanging("ID_цвета");
                    _ID_цвета = StructuralObject.SetValidValue(value, "ID_цвета");
                    ReportPropertyChanged("ID_цвета");
                    OnID_цветаChanged();
                }
            }
        }
        private global::System.Int32 _ID_цвета;
        partial void OnID_цветаChanging(global::System.Int32 value);
        partial void OnID_цветаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String наименование
        {
            get
            {
                return _наименование;
            }
            set
            {
                OnнаименованиеChanging(value);
                ReportPropertyChanging("наименование");
                _наименование = StructuralObject.SetValidValue(value, false, "наименование");
                ReportPropertyChanged("наименование");
                OnнаименованиеChanged();
            }
        }
        private global::System.String _наименование;
        partial void OnнаименованиеChanging(global::System.String value);
        partial void OnнаименованиеChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SkladTov3En", "FkцветID", "товары")]
        public EntityCollection<товары> товары
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<товары>("SkladTov3En.FkцветID", "товары");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<товары>("SkladTov3En.FkцветID", "товары", value);
                }
            }
        }

        #endregion

    }

    #endregion

}
